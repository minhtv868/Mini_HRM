@using IC.Domain.Entities.Identity
@using Microsoft.AspNetCore.Http.Extensions;
@using Microsoft.AspNetCore.Identity
@using IC.WebJob.Helpers
@using IC.Application.Features.IdentityFeatures.SysFunctions.Queries
@inject IHttpContextAccessor _httpContextAccessor
@model Result<List<SysFunctionGetMenuByUserDto>>
@{
	string[] parentFunctionPaths, childrenFunctionPaths, grandChildrenFunctionPaths,
		currentPaths = _httpContextAccessor.HttpContext?.Request?.Path.ToString().ToLower().Trim()
		.Split('/', StringSplitOptions.RemoveEmptyEntries);
	string currentUrl = _httpContextAccessor.HttpContext?.Request?.GetDisplayUrl().ToLower().Trim();
}
<nav class="navbar navbar-light navbar-vertical navbar-expand-lg">
	<script>
		var navbarStyle = localStorage.getItem("navbarStyle");
		if (navbarStyle && navbarStyle !== 'transparent') {
			document.querySelector('.navbar-vertical').classList.add(`navbar-${navbarStyle}`);
		}
	</script>
	<div class="d-flex align-items-center">
		<div class="toggle-icon-wrapper">
			<button class="btn navbar-toggler-humburger-icon navbar-vertical-toggle" data-bs-toggle="tooltip" data-bs-placement="left" aria-label="Ẩn/hiện thanh điều hướng dọc" data-bs-original-title="Ẩn/hiện thanh điều hướng dọc"><span class="navbar-toggle-icon"><span class="toggle-line"></span></span></button>
		</div>
		<a href="/" class="navbar-brand">
			<div class="d-flex align-items-center py-2">
				<img class="me-2" src="~/Images/logo.svg" alt="voh" width="120">
			</div>
		</a>
	</div>
	<div class="collapse navbar-collapse" id="navbarVerticalCollapse">
		@if (Model.Data != null && Model.Data.Any())
		{
			List<SysFunctionGetMenuByUserDto> parentFunctionsListByUser = MenuHelper.GetItemsByParentId(Model.Data, 0),
			childrenFunctionsListByUser, grandChildrenFunctionsListByUser;
			<div class="navbar-vertical-content scrollbar">
				<ul id="navbarVerticalNav" class="navbar-nav flex-column mb-3 mt-2">
					<li class="nav-item">
						@foreach (var parentFunction in parentFunctionsListByUser)
						{
							parentFunctionPaths = parentFunction.Url.Split('?')[0]?.ToLower().Trim()
								.Split('/', StringSplitOptions.RemoveEmptyEntries);
							if (parentFunction.HasChild)
							{
								childrenFunctionsListByUser = MenuHelper.GetItemsByParentId(Model.Data, parentFunction.Id);
								if (childrenFunctionsListByUser != null && childrenFunctionsListByUser.Any())
								{
									<a class="nav-link dropdown-indicator" href="#verticalNav@(parentFunction.Id)" role="button" data-bs-toggle="collapse" aria-expanded="false" aria-controls="verticalNav@(parentFunction.Id)">
										<div class="d-flex align-items-center">
											@if (!string.IsNullOrWhiteSpace(parentFunction.IconPath))
											{
												<span class="nav-link-icon">
													<span class="@parentFunction.IconPath"></span>
												</span>
											}
											<span class="nav-link-text ps-1">@parentFunction.FunctionName</span>
										</div>
									</a>
									<ul id="verticalNav@(parentFunction.Id)" class="nav parent collapse">
										@foreach (var childrenFunction in childrenFunctionsListByUser)
										{
											childrenFunctionPaths = childrenFunction.Url.Split('?')[0]?.ToLower().Trim()
												.Split('/', StringSplitOptions.RemoveEmptyEntries);
											<li class="nav-item">
												@if (childrenFunction.HasChild)
												{
													grandChildrenFunctionsListByUser = MenuHelper.GetItemsByParentId(Model.Data, childrenFunction.Id);
													if (grandChildrenFunctionsListByUser != null && grandChildrenFunctionsListByUser.Any())
													{
														<a class="nav-link dropdown-indicator" href="#verticalNav@(childrenFunction.Id)" data-bs-toggle="collapse" aria-expanded="false" aria-controls="verticalNav@(childrenFunction.Id)">
															<div class="d-flex align-items-center"><span class="nav-link-text ps-1">@childrenFunction.FunctionName</span></div>
														</a>
														<ul id="verticalNav@(childrenFunction.Id)" class="nav children collapse">
															@foreach (var grandChildrenFunction in grandChildrenFunctionsListByUser)
															{
																grandChildrenFunctionPaths = grandChildrenFunction.Url.Split('?')[0]?.ToLower().Trim()
																	.Split('/', StringSplitOptions.RemoveEmptyEntries);
																<li class="nav-item">
																	<a class="nav-link@(currentPaths.SequenceEqual(grandChildrenFunctionPaths) && (currentUrl.Contains(grandChildrenFunction.Url.ToLower().Trim())) ? " active" : "")" href="@grandChildrenFunction.Url" title="@grandChildrenFunction.FunctionName">
																		<div class="d-flex align-items-center"><span class="nav-link-text ps-1">@grandChildrenFunction.FunctionName</span></div>
																	</a>
																</li>
															}
														</ul>
													}
													else
													{
														<a class="nav-link@(currentPaths.SequenceEqual(childrenFunctionPaths) && (currentUrl.Contains(childrenFunction.Url.ToLower().Trim())) ? " active" : "")" href="@childrenFunction.Url" title="@childrenFunction.FunctionName">
															<div class="d-flex align-items-center"><span class="nav-link-text ps-1">@childrenFunction.FunctionName</span></div>
														</a>
													}
												}
												else
												{
													<a class="nav-link@(currentPaths.SequenceEqual(childrenFunctionPaths) && (currentUrl.Contains(childrenFunction.Url.ToLower().Trim())) ? " active" : "")" href="@childrenFunction.Url" title="@childrenFunction.FunctionName">
														<div class="d-flex align-items-center"><span class="nav-link-text ps-1">@childrenFunction.FunctionName</span></div>
													</a>
												}
											</li>
										}
									</ul>
								}
								else
								{
									<a class="nav-link@(currentPaths.SequenceEqual(parentFunctionPaths) && (currentUrl.Contains(parentFunction.Url.ToLower().Trim())) ? " active" : "")" href="@parentFunction.Url" title="@parentFunction.FunctionName" role="button">
										<div class="d-flex align-items-center">
											@if (!string.IsNullOrWhiteSpace(parentFunction.IconPath))
											{
												<span class="nav-link-icon">
													<span class="@parentFunction.IconPath"></span>
												</span>
											}
											<span class="nav-link-text ps-1">@parentFunction.FunctionName</span>
										</div>
									</a>
								}
							}
							else
							{
								<a class="nav-link@(currentPaths.SequenceEqual(parentFunctionPaths) && (currentUrl.Contains(parentFunction.Url.ToLower().Trim())) ? " active" : "")" href="@parentFunction.Url" title="@parentFunction.FunctionName" role="button">
									<div class="d-flex align-items-center">
										@if (!string.IsNullOrWhiteSpace(parentFunction.IconPath))
										{
											<span class="nav-link-icon">
												<span class="@parentFunction.IconPath"></span>
											</span>
										}
										<span class="nav-link-text ps-1">@parentFunction.FunctionName</span>
									</div>
								</a>
							}
						}
					</li>
				</ul>
			</div>
		}
	</div>
</nav> 